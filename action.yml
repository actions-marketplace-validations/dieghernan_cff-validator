name: CITATION.cff validator
description: "Validate your repository's CITATION.cff file using R software"
inputs:
  citation-path:  
    description: 'Path to CITATION.cff file. By default it select a CITATION.cff file on the root of the repository'
    required: false
    default: 'CITATION.cff'
runs:
  using: composite
  steps:
      - name: Install R
        uses: r-lib/actions/setup-r@master
        with:
          install-r: false
        
      - name: Restore R package cache
        uses: actions/cache@v2.1.6
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install packages
        run: |
          if (isFALSE(requireNamespace("remotes", quietly = TRUE))) {
                    install.packages("remotes", dependencies = TRUE)
          }
          remotes::install_cran(c("yaml","jsonlite", "jsonvalidate"), dependencies = TRUE, quiet = TRUE)
        shell: Rscript {0}
        
      - name: Validate cff
        run: |
          citfile <- yaml::read_yaml("${{ inputs.citation-path }}")
          cit_temp <- tempfile(fileext = ".json")
          # Convert to json
          jsonlite::write_json(citfile, cit_temp, pretty = TRUE)
          # Clean json file
          citfile_clean <- readLines(cit_temp)
          citfile_clean <- gsub('["','"', citfile_clean, fixed = TRUE)
          citfile_clean <- gsub('"]','"', citfile_clean, fixed = TRUE)
          writeLines(citfile_clean, cit_temp)
          # Download latest scheme
          schema_temp <- tempfile("schema", fileext = ".json")
          download.file("https://raw.githubusercontent.com/citation-file-format/citation-file-format/main/schema.json",
                        schema_temp, mode="wb", quiet = TRUE)
          result <- jsonvalidate::json_validate(cit_temp,
                            schema_temp,
                            verbose = TRUE)
          message("------\n")
          if (result == FALSE){
          print(attributes(result)$errors)
          message("\n")
            stop("${{ inputs.citation-path }} file no valid")
          } else {
            message("${{ inputs.citation-path }} is valid")
          }
        shell: Rscript {0}
        