name: cff-validator
author: Diego Hernang√≥mez
description: "Validate your repository's CITATION.cff file using R software"
branding:
  icon: 'book-open'
  color: 'gray-dark'
inputs:
  citation-path:
    description: 'Path to .cff file to be validated. By default it selects a CITATION.cff file on the root of the repository.'
    required: false
    default: 'CITATION.cff'
runs:
  using: composite
  steps:
      - name: Install R
        uses: r-lib/actions/setup-r@master
        with:
          install-r: false

      - name: Restore R package cache
        uses: actions/cache@v2.1.6
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install packages
        run: |
          if (isFALSE(requireNamespace("remotes", quietly = TRUE))) {
                    install.packages("remotes", dependencies = TRUE)
          }
          remotes::install_cran(c("yaml","jsonlite", "jsonvalidate", "knitr"), dependencies = TRUE, quiet = TRUE)
        shell: Rscript {0}

      - name: Validate cff
        run: |
          citfile <- yaml::read_yaml("${{ inputs.citation-path }}")
          # All elements to character
          citfile <- rapply(citfile, function(x) as.character(x), how = "replace")

          # Convert to json
          cit_temp <- tempfile(fileext = ".json")
          jsonlite::write_json(citfile, cit_temp, pretty = TRUE)

          # Manage brackets
          citfile_clean <- readLines(cit_temp)

          # Search brackets to keep
          # Keep ending and starting
          keep_lines <- grep('", "', citfile_clean)
          keep_lines <- c(keep_lines, grep("\\[$", citfile_clean))
          keep_lines <- c(keep_lines, grep(" \\],", citfile_clean))
          keep_lines <- c(keep_lines, grep(" \\]$", citfile_clean))
          keep_lines <- sort(unique(keep_lines))

          if (all(keep_lines > 0)) {
            keep_string <- citfile_clean[keep_lines]
            citfile_clean[keep_lines] <- ""
          }
          # Remove rest of brackets
          citfile_clean <- gsub('["', '"', citfile_clean, fixed = TRUE)
          citfile_clean <- gsub('"]', '"', citfile_clean, fixed = TRUE)

          if (all(keep_lines > 0)) {
            # Add "good" brackets back
            citfile_clean[keep_lines] <- keep_string
          }

          writeLines(citfile_clean, cit_temp)

          # Download latest scheme
          schema_temp <- tempfile("schema", fileext = ".json")
          download.file("https://raw.githubusercontent.com/citation-file-format/citation-file-format/main/schema.json",
                        schema_temp,
                        mode = "wb", quiet = TRUE
          )

          # Validate
          result <- jsonvalidate::json_validate(cit_temp,
                                                schema_temp,
                                                verbose = TRUE
          )
          # Results
          message("------\n")
          if (result == FALSE){
            print(knitr::kable(attributes(result)$errors, align = "l", caption = "See errors"))
              writeLines(knitr::kable(attributes(result)$errors,
                          align = "l",
                          caption = "See errors"
                          ),
                          con = "citation_cff_errors.md")
          message("\n\n------")
            stop("${{ inputs.citation-path }} file not valid")
          } else {
            message("${{ inputs.citation-path }} is valid")
          }
        shell: Rscript {0}


      - uses: actions/upload-artifact@v2
        with:
          name: citation-cff-errors
          path: citation_cff_errors.md
          if-no-files-found: ignore
